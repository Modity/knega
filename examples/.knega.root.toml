# Currently relative to root directory, should be relative to application directory and allow overrides from appconfig
# deploy-values.yml in application directory can be used to ovveride settings in values.yaml and included in the built chart
# you can then use another config file or just --set for environment specific values when deploying
baseChartPath = "shared/chart"

# Defines where to look for applications
applicationPaths = ["applications", "libraries", "infrastructure"]
applicationSearchDepth = 2

# Default configuration (used by applications, can be overwritten by app configuration)

# Defines how to check for changes, a hash will be created based on the content of input files
# input paths have $ROOT and $APPLICATION_NAME variable available and are relative to application directory
[Input]
  [Input.Files]
    paths = ["$ROOT/.knega.root.toml"]

  [Input.GitFiles]
    # git ls-files <pattern> (in application directory)
    paths = ["*"]
# everything below has $ROOT, $INPUTS_HASH, $APPLICATION_NAME variables available
[Output]
  [Output.DockerImage]
    # Path of idfile (docker build --iidfile), used by knega docker upload to find the correct image to upload
    idfile = "container.id"
    # Repository to check whether it was already built or to upload to
    repository = "some-registry.com/some-category/$APPLICATION_NAME"
    tag = "$INPUTS_HASH"
    # Which environment variables to grab username/password from
    # below are hardcoded for now
    # usernameEnv = "KNEGA_DOCKER_USERNAME"
    # passwordEnv = "KNEGA_DOCKER_PASSWORD"

  [Output.HelmChart]
    # uploading chart uses git and existence check uses helm search
    # to avoid conflicts this does not re-index the repository currently
    # i run knega chart update-index after build to avoid it happening in parallell
    packageFilePath = ".generated"
    packageFileName = "$APPLICATION_NAME-1.0.0-$INPUTS_HASH.tgz"
    repository = "https://raw.githubusercontent.com/user/repository/master"
    repositoryGitURL = "git@github.com:user/repository.git"
    # below are hardcoded for now
    # usernameEnv = "KNEGA_HELM_USERNAME"
    # passwordEnv = "KNEGA_HELM_PASSWORD"

# All commands are run with application directory as working directory, root scripts can be run using $ROOT
[Check]
  commands = [
    "knega test"
  ]

[Build]
  commands = [
    "knega build",
    "knega chart create",
    "knega docker upload",
    "knega chart upload"
  ]

# none of the analyze actions are implemented yet
# [Analyze]
#   commands = [
#     "knega code-quality",
#     "knega dependency-vulnerability",
#     "knega container-vulnerability",
#     "knega performance",
#     "knega generate-report-bundle"
#   ]

[Release]
  # knega release isn't implemented yet, so currently I'm running a bash script here like this
  # which also serves as an example of how knega tooling can be replaced for different parts
  commands = [
    "$ROOT/scripts/release.sh -a $APPLICATION_NAME -h $INPUTS_HASH"
    # "knega release"
  ]
