###
#   IMPORTANT! For now the following is just thoughts on how it should work
###

# Used by knega create-chart action, can be overwritten by chartPath in application config
# If neither is set will use Gitlabs auto-deploy-app chart (https://gitlab.com/gitlab-org/charts/auto-deploy-app/)
baseChartPath = "shared/chart"

# Defines where to look for applications
applicationPaths = ["applications", "libraries", "infrastructure"]
applicationSearchDepth = 2

# Worker settings (parallellization is done per app, so no use having more workers than apps)
[Workers]
  # Defaults to number of cpu threads available
  count = 8

# Remote worker settings (amount of simultaneous jobs to be executed on kubernetes cluster)
[RemoteWorkers]
  # Remote workers are disabled by default
  count = 0
  kube_config_path = ""
  kube_context = ""

# Default configuration (used by applications, can be overwritten by app configuration)

# Defines how to check for changes, a hash will be created based on the content of input files
[Input]
  [Input.Files]
    patterns = ["$ROOT/.knega.root.toml"]

  [Input.GitFiles]
    # git ls-files <pattern> (in application directory)
    patterns = ["*"]

[Output]
  [Output.DockerImage]
    # Path of idfile (docker build --iidfile)
    idfile = "container.id"
    # Repository to check whether it was already built or to upload to
    repository = "repository.example.com/$APPLICATION_NAME"
    tag = "$INPUTS_HASH"

  [Output.HelmChart]
    packageFilePath = "."
    packageFileName = "$APPLICATION_NAME-$INPUTS_HASH.tgz"
    repository = ""
    git = ""

# knega all check
[Check]
  # working directory: application directory, can run scripts from root using $ROOT_PATH
  commands = [
    "knega test"
  ]

# knega all build
[Build]
  # working directory: application directory, can run scripts from root using $ROOT_PATH
  commands = [
    "knega build",
    "knega chart create --inputs-hash $INPUTS_HASH",
    "knega docker upload --inputs-hash $INPUTS_HASH",
    "knega chart upload --inputs-hash $INPUTS_HASH"
  ]

# knega all analyze
[Analyze]
  # The way I plan on using this is for checks where someone needs to examine the result for it to be worth the compute time
  # and have this action be manually triggered
  onlyChanged = false
  # working directory: application directory, can run scripts from root using $ROOT_PATH
  commands = [
    "knega code-quality",
    "knega dependency-vulnerability",
    "knega container-vulnerability",
    "knega performance",
    "knega generate-report-bundle"
  ]

# knega all release
[Release]
  onlyChanged = false
  # Will run for all applications, regardless of whether it had changes
  # working directory: application directory, can run scripts from root using $ROOT_PATH
  # $INPUTS_HASH is available
  commands = [
    "knega release --inputs-hash $INPUTS_HASH"
  ]
